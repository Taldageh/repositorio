* {
        box-sizing: border-box;
    /*
    Box-sizing: border-box faz com que o padding e a borda sejam incluídos no cálculo da largura e altura do elemento
    Isso significa que, se você definir uma largura de 100px e adicionar 10px de padding, a largura total do elemento será 100px, não 120px (100px + 10px + 10px).
    Isso é útil para evitar problemas de layout, especialmente quando você está trabalhando com larguras fixas ou porcentagens.
    */

}

body {
    background:  rgba(64, 22, 104, 0.897);
    font-family: Arial, Helvetica, sans-serif;
    height: 100%;
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
    /*
        primeiro valor do margin é para o topo, o segundo é para os lados
        o auto faz com que o conteúdo fique centralizado na tela
        o max-width limita a largura máxima do conteúdo, evitando que ele fique muito largo em telas grandes
        o padding adiciona um espaço interno ao redor do conteúdo, evitando que ele fique colado
    
    */
}

h1 {
    text-align: center;
    color: rgb(255, 255, 255);
    font-size: 36px;
}

h2 {
    color: rgb(0, 0, 0);
    margin-bottom: 20px;
    font-size: 24px;
}

main {
    display: flex;
    gap: 20px;
    margin-bottom: 30px;
}

.sessao-maior {
    background: white;
    width: 100%;
    border-radius: 8px;
    padding: 30px;
    height: 400px;
}

/*
top em cima
bottom em baixo
left à esquerda 
right à direita
gap é o espaçamento entre os elementos dentro do flex container
*/

.area-codigo {
    background: rgba(64, 22, 104, 0.932);
    height: calc(100% - 70px);
    /*
    calc() é uma função do CSS que permite fazer cálculos com valores de tamanho
    nesse caso, estamos subtraindo 70px da altura total do elemento para deixar um espaço para o cabeçalho
    */
    border-radius: 8px;
    padding: 20px;
    color: #F8F9FA;
    font-size: 14px;
}

.area-resultado {
    background: #F8F9FA;
    border-radius: 8px;
    height: calc(100% - 70px);
    display: flex;
    align-items: center;
    justify-content: center;
    /*
    align-items: center alinha o conteúdo verticalmente no centro
    justify-content: center alinha o conteúdo horizontalmente no centro
    */
    color: #9999;
}

.sessao-menor {
    background: #F8F9FA;
    border-radius: 8px; /*arredonda os cantos do elemento*/ 
    padding: 20px;
    display: flex;
    gap: 15px;
}

input {
    width: 80%;
    padding: 15px 20px;
    font-size: 16px;
    color: rgba(35, 3, 71, 0.932);
    border-radius: 6px;
    border: 2px solid #94A3B8;
}

button {
    background-color: rgba(138, 63, 224, 0.89);
    color: white;
    border: none;
    border-radius: 10px;
    padding: 15px 40px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: 0.5s;
    /*
    transition é uma transição, quando trocar de uma cor e outra ele tera delay
    */
}

button:hover {
    background-color: rgba(148, 88, 216, 0.7);
    /* 
    O hover é um pseudo-classe que aplica estilos quando o mouse passa sobre o elemento
    Nesse caso, estamos mudando a cor de fundo do botão quando o mouse passa sobre ele
    */
}

button:active {
    transform: scale(0.9);
    /*
    transform scale é que ele diminiu
    */
}